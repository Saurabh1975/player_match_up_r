g2 <- ggplot(viz_df_line, aes(x = game_number, y = time_of_poss, group = player_id,
color = team_color)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
scale_color_identity() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"))   +
geom_text(data = viz_df_line %>% filter(game_number == max(viz_df_line$game_number)),
aes(x = game_number , y = time_of_poss, fill=NULL,
label = player_name_last),
color='#404040',
size = 4, hjust = 0,
position = position_nudge(x = 0.25, y = -0.125)) +
geom_from_path( data = viz_df_line %>% filter(game_number == max(viz_df_line$game_number)),
aes(x = game_number , y = time_of_poss, fill=NULL,
path = player_headshot, color = NULL),
width = 0.1, height = 0.0735, position = position_nudge(x = 0.125, y = -.125),
) +
labs(title=paste0("Who Had the Ball "),
subtitle = paste0(viz_df_bar$matchup[1], ", 2024"),
caption = 'Data: stats.nba.com via nba_api | Viz: @SaurabhOnTap') +
theme_saurabh() +
xlab("") +
ylab("Time on Ball (Min.)") +
coord_cartesian(xlim = c(1, length(unique(viz_df_line$game_number))*1.025),
ylim = c(0, max(viz_df_line$time_of_poss)*1.025)
)
ggsave(plot = g2, filename = paste0("Plots/", viz_df_line$team_name[1], " - ", viz_df_line$opp_name[1], " - Line.png"),
height = 6, width = 6)
team_name = 'PHX'
# Combine all dataframes into one
viz_df_bar <- combined_df %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss) %>%
mutate(time_of_poss_cumsum =  cumsum(time_of_poss),
time_of_poss_scale = scales::rescale(time_of_poss),
) %>%
dplyr::filter(team_abbreviation == team_name) %>%
ungroup() %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss)
team_name = "PHX"
# Combine all dataframes into one
viz_df_bar <- combined_df %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss) %>%
mutate(time_of_poss_cumsum =  cumsum(time_of_poss),
time_of_poss_scale = scales::rescale(time_of_poss),
) %>%
dplyr::filter(team_abbreviation == team_name) %>%
ungroup() %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss)
team_name = "PHX"
# Combine all dataframes into one
viz_df_bar <- combined_df %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss) %>%
mutate(time_of_poss_cumsum =  cumsum(time_of_poss),
time_of_poss_scale = scales::rescale(time_of_poss),
) %>%
dplyr::filter(team_abbreviation == team_name) %>%
ungroup() %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss)
team_filter = "PHX"
# Combine all dataframes into one
viz_df_bar <- combined_df %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss) %>%
mutate(time_of_poss_cumsum =  cumsum(time_of_poss),
time_of_poss_scale = scales::rescale(time_of_poss),
) %>%
dplyr::filter(team_abbreviation == team_filter) %>%
ungroup() %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss)
team_filter = "PHX"
generate_charts <- function(team_filter){
# Combine all dataframes into one
viz_df_bar <- combined_df %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss) %>%
mutate(time_of_poss_cumsum =  cumsum(time_of_poss),
time_of_poss_scale = scales::rescale(time_of_poss),
) %>%
dplyr::filter(team_abbreviation == team_filter) %>%
ungroup() %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss)
bar_width <- 0.35
bar_spacing <- 0.2 + .04*length(unique(viz_df_bar$game_number))
# Create horizontal stacked bar chart
g1 <- ggplot(viz_df_bar, aes(x = time_of_poss, y = game_number)) +
geom_bar(stat = "identity", color = "white", width = bar_width,
aes(alpha = time_of_poss, fill = team_color)) +
scale_fill_identity() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"))   +
geom_text( aes(x = time_of_poss_cumsum - time_of_poss/2 , y = game_number, fill=NULL,
label = ifelse(viz_df_bar$time_of_poss > 1.5, viz_df_bar$player_name_last, "")),
color='white',
size = 2.4, hjust = 0.5, fontface = 'bold') +
geom_from_path(data = viz_df_bar %>% filter(time_of_poss > 1.5),
aes(x = time_of_poss_cumsum - time_of_poss/2,
y = game_number, path = player_headshot),
width = 0.1, height = 0.0735, position = position_nudge(y = bar_spacing)) +
theme(legend.position="none") +
theme_saurabh() +
labs(title=paste0("Who Had the Ball "),
subtitle = paste0(viz_df_bar$matchup[1], ", 2024"),
caption = 'Data: stats.nba.com via nba_api | Viz: @SaurabhOnTap',
x = "Time on Ball (Min.)", y = "") +
coord_cartesian(ylim = c(1, length(unique(viz_df_bar$game_number))*1.025
))  +
scale_y_discrete(limits=rev)
ggsave(plot = g1, filename = paste0("Plots/", viz_df_bar$team_name[1], " - ", viz_df_bar$opp_name[1], " - Bar.png"),
height = 6, width = 6)
player_list <- combined_df %>%
group_by(game_id, team_id) %>%
arrange(-time_of_poss) %>%
slice(1:3) %>%
pull(player_id) %>%
unique()
# Combine all dataframes into one
viz_df_line_master <- combined_df %>%
filter(player_id %in%  player_list)
viz_df_line <- viz_df_line_master %>%
filter(team_abbreviation == team_filter)
g2 <- ggplot(viz_df_line, aes(x = game_number, y = time_of_poss, group = player_id,
color = team_color)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
scale_color_identity() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"))   +
geom_text(data = viz_df_line %>% filter(game_number == max(viz_df_line$game_number)),
aes(x = game_number , y = time_of_poss, fill=NULL,
label = player_name_last),
color='#404040',
size = 4, hjust = 0,
position = position_nudge(x = 0.25, y = -0.125)) +
geom_from_path( data = viz_df_line %>% filter(game_number == max(viz_df_line$game_number)),
aes(x = game_number , y = time_of_poss, fill=NULL,
path = player_headshot, color = NULL),
width = 0.1, height = 0.0735, position = position_nudge(x = 0.125, y = -.125),
) +
labs(title=paste0("Who Had the Ball "),
subtitle = paste0(viz_df_bar$matchup[1], ", 2024"),
caption = 'Data: stats.nba.com via nba_api | Viz: @SaurabhOnTap') +
theme_saurabh() +
xlab("") +
ylab("Time on Ball (Min.)") +
coord_cartesian(xlim = c(1, length(unique(viz_df_line$game_number))*1.025),
ylim = c(0, max(viz_df_line$time_of_poss)*1.025)
)
ggsave(plot = g2, filename = paste0("Plots/", viz_df_line$team_name[1], " - ", viz_df_line$opp_name[1], " - Line.png"),
height = 6, width = 6)
}
for(team in unique(combined_df$team_name)){
print(team)
generate_charts(team)
}
for(team in unique(combined_df$team_abbreviation)){
print(team)
generate_charts(team)
}
library(hoopR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(png)
library(ggimage)
library(magick)
library(ggtext)
library(extrafont)
library(forcats)
loadfonts(device="win")
pull_matchup_box <- function(game_id){
print(game_id)
pull_df <- rbind(nba_boxscorematchupsv3(game_id = game_id)[[1]], nba_boxscorematchupsv3(game_id = game_id)[[2]])
pull_df <- tryCatch(
expr = {
rbind(nba_boxscorematchupsv3(game_id = game_id)[[1]], nba_boxscorematchupsv3(game_id = game_id)[[2]])
},
error = function(e) {
print("Error occurred while retrieving data from the API.")
return(NULL)  # Return NULL if an error occurs
}
)
if (is.null(pull_df)) {
return(NULL)  # Return NULL if pull_df is NULL (i.e., an error occurred)
}
Sys.sleep(3)
df <- pull_df %>%
rename(OFF_PLAYER_ID = person_id, DEF_PLAYER_ID = matchups_person_id) %>%
mutate(OFF_PLAYER_NAME = paste0(first_name, " " , family_name),
DEF_PLAYER_NAME = paste0(matchups_first_name, " " , matchups_family_name),
MATCHUP_MIN = matchup_minutes_sort/60,
off_team_id = team_id,
def_team_id = ifelse(team_id == home_team_id, away_team_id, home_team_id)) %>%
select(game_id, off_team_id, OFF_PLAYER_ID, OFF_PLAYER_NAME,
def_team_id, DEF_PLAYER_ID, DEF_PLAYER_NAME,
MATCHUP_MIN, percentage_total_time_both_on)
return(df)
}
gamelog <-  nba_leaguegamelog(league_id = '00', season = year_to_season(most_recent_nba_season() - 1),
season_type = 'Playoffs')[[1]] %>%
mutate(MATCHUP = str_replace_all(MATCHUP, c("@" = "vs.")))  %>%
filter(!is.na(WL)) %>%
select(TEAM_NAME, TEAM_ID, GAME_ID, GAME_DATE, MATCHUP) %>%
group_by(MATCHUP, TEAM_ID, TEAM_NAME) %>%
arrange(MATCHUP,GAME_DATE) %>%
mutate(game_number = paste0("Game ", row_number())) %>%
ungroup() %>%
arrange(MATCHUP) %>%
mutate(version = format(Sys.time(), "%a %b %d %X"),
)
unique_matchups <- gamelog %>%
group_by(TEAM_ID, MATCHUP) %>%
summarize(matchup_start = min(GAME_DATE)) %>%
arrange(matchup_start) %>%
ungroup() %>%
group_by(TEAM_ID) %>%
mutate(round = row_number()) %>%
ungroup()
gamelog_enchanced <- gamelog %>%
left_join(gamelog %>% select('GAME_ID', 'TEAM_NAME') %>% rename('OPP_NAME' = 'TEAM_NAME'),
by = c('GAME_ID')) %>%
filter(OPP_NAME != TEAM_NAME) %>%
left_join(unique_matchups, by = c('TEAM_ID', 'MATCHUP')) %>%
mutate(matchup_full = paste0("Round ", round, ": ", MATCHUP, ", ", game_number)) %>%
left_join(team_colors %>% select(TEAM_NAME, Primary.Color) %>% rename('TEAM_COLOR' = 'Primary.Color'),
by = c('TEAM_NAME'))  %>%
left_join(team_colors %>% select(TEAM_NAME, Primary.Color)
%>% rename('OPP_NAME' = 'TEAM_NAME', 'OPP_COLOR' = 'Primary.Color'),
by = c('OPP_NAME'))  %>%
group_by(TEAM_NAME, TEAM_ID) %>%
arrange(TEAM_NAME, round, game_number)
#Get Matchup Dataframe
raw_matchup_df <- do.call(rbind, lapply(unique(gamelog$GAME_ID), pull_matchup_box))
#Join in helper columns
team_colors <- read.csv('C:/Users/saurabh.rane/OneDrive - Slalom/NBA/data_update_scripts/Data/teamColors.csv') %>%
select(TEAM_ID, TEAM_NAME, TEAM_ABBREVIATION, Primary.Color)
#First pass at Matchup Clean
matchup_df <- raw_matchup_df %>%
left_join(team_colors, by = c('off_team_id' = 'TEAM_ID')) %>%
left_join(team_colors, by = c('def_team_id' = 'TEAM_ID')) %>%
rename(off_team_abv = TEAM_ABBREVIATION.x, off_team_name = TEAM_NAME.x, off_team_color = Primary.Color.x,
def_team_abv = TEAM_ABBREVIATION.y, def_team_name = TEAM_NAME.y, def_team_color = Primary.Color.y) %>%
mutate(OFF_PLAYER_NAME = str_replace_all(OFF_PLAYER_NAME, "[^[:alnum:][:space:]]", ""),
DEF_PLAYER_NAME = str_replace_all(DEF_PLAYER_NAME, "[^[:alnum:][:space:]]", ""))
df_def <- matchup_df %>%
group_by(game_id, def_team_id, DEF_PLAYER_ID) %>%
arrange(DEF_PLAYER_ID, -MATCHUP_MIN) %>%
mutate(min_played = sum(MATCHUP_MIN),
matchup_min_end_def = cumsum(MATCHUP_MIN),
matchup_min_start_def = matchup_min_end_def - MATCHUP_MIN,
pct_matchup_time_def = MATCHUP_MIN/min_played,
pct_matchup_time_scaled_def = scales::rescale(pct_matchup_time_def)) %>%
select(game_id, def_team_id, OFF_PLAYER_ID, DEF_PLAYER_ID, matchup_min_start_def,
matchup_min_end_def,  pct_matchup_time_scaled_def)
df <- matchup_df %>%
group_by(game_id, off_team_id, OFF_PLAYER_ID, OFF_PLAYER_NAME) %>%
arrange(OFF_PLAYER_NAME, -MATCHUP_MIN) %>%
mutate(min_played = sum(MATCHUP_MIN),
matchup_min_end = cumsum(MATCHUP_MIN),
matchup_min_start = matchup_min_end - MATCHUP_MIN,
pct_matchup_time = MATCHUP_MIN/min_played,
OFF_PLAYER_NAME_LAST = sub("^\\S+\\s", "", OFF_PLAYER_NAME),
DEF_PLAYER_NAME_LAST = sub("^\\S+\\s", "", DEF_PLAYER_NAME),
pct_matchup_time_scaled = scales::rescale(pct_matchup_time),
DEF_PLAYER_HEADSHOT = paste0("https://cdn.nba.com/headshots/nba/latest/1040x760/", DEF_PLAYER_ID, ".png"),
OFF_PLAYER_HEADSHOT = paste0("https://cdn.nba.com/headshots/nba/latest/1040x760/", OFF_PLAYER_ID, ".png")) %>%
inner_join(gamelog_enchanced %>% select(GAME_ID, TEAM_ID, MATCHUP, game_number, matchup_full) %>% mutate(TEAM_ID = as.integer(TEAM_ID)),
by = c('game_id' = 'GAME_ID', 'off_team_id' = 'TEAM_ID')) %>%
inner_join(df_def, by = c('game_id', 'OFF_PLAYER_ID',  'def_team_id', 'DEF_PLAYER_ID'))
write.csv(df, "Data/matchups.csv")
write.csv(gamelog_enchanced, "Data/gamelog.csv")
library(hoopR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(png)
library(ggimage)
library(magick)
library(ggtext)
library(extrafont)
library(forcats)
loadfonts(device="win")
pull_matchup_box <- function(game_id){
print(game_id)
pull_df <- rbind(nba_boxscorematchupsv3(game_id = game_id)[[1]], nba_boxscorematchupsv3(game_id = game_id)[[2]])
pull_df <- tryCatch(
expr = {
rbind(nba_boxscorematchupsv3(game_id = game_id)[[1]], nba_boxscorematchupsv3(game_id = game_id)[[2]])
},
error = function(e) {
print("Error occurred while retrieving data from the API.")
return(NULL)  # Return NULL if an error occurs
}
)
if (is.null(pull_df)) {
return(NULL)  # Return NULL if pull_df is NULL (i.e., an error occurred)
}
Sys.sleep(3)
df <- pull_df %>%
rename(OFF_PLAYER_ID = person_id, DEF_PLAYER_ID = matchups_person_id) %>%
mutate(OFF_PLAYER_NAME = paste0(first_name, " " , family_name),
DEF_PLAYER_NAME = paste0(matchups_first_name, " " , matchups_family_name),
MATCHUP_MIN = matchup_minutes_sort/60,
off_team_id = team_id,
def_team_id = ifelse(team_id == home_team_id, away_team_id, home_team_id)) %>%
select(game_id, off_team_id, OFF_PLAYER_ID, OFF_PLAYER_NAME,
def_team_id, DEF_PLAYER_ID, DEF_PLAYER_NAME,
MATCHUP_MIN, percentage_total_time_both_on)
return(df)
}
gamelog <-  nba_leaguegamelog(league_id = '00', season = year_to_season(most_recent_nba_season() - 1),
season_type = 'Playoffs')[[1]] %>%
mutate(MATCHUP = str_replace_all(MATCHUP, c("@" = "vs.")))  %>%
filter(!is.na(WL)) %>%
select(TEAM_NAME, TEAM_ID, GAME_ID, GAME_DATE, MATCHUP) %>%
group_by(MATCHUP, TEAM_ID, TEAM_NAME) %>%
arrange(MATCHUP,GAME_DATE) %>%
mutate(game_number = paste0("Game ", row_number())) %>%
ungroup() %>%
arrange(MATCHUP) %>%
mutate(version = format(Sys.time(), "%a %b %d %X"),
)
unique_matchups <- gamelog %>%
group_by(TEAM_ID, MATCHUP) %>%
summarize(matchup_start = min(GAME_DATE)) %>%
arrange(matchup_start) %>%
ungroup() %>%
group_by(TEAM_ID) %>%
mutate(round = row_number()) %>%
ungroup()
gamelog_enchanced <- gamelog %>%
left_join(gamelog %>% select('GAME_ID', 'TEAM_NAME') %>% rename('OPP_NAME' = 'TEAM_NAME'),
by = c('GAME_ID')) %>%
filter(OPP_NAME != TEAM_NAME) %>%
left_join(unique_matchups, by = c('TEAM_ID', 'MATCHUP')) %>%
mutate(matchup_full = paste0("Round ", round, ": ", MATCHUP, ", ", game_number)) %>%
left_join(team_colors %>% select(TEAM_NAME, Primary.Color) %>% rename('TEAM_COLOR' = 'Primary.Color'),
by = c('TEAM_NAME'))  %>%
left_join(team_colors %>% select(TEAM_NAME, Primary.Color)
%>% rename('OPP_NAME' = 'TEAM_NAME', 'OPP_COLOR' = 'Primary.Color'),
by = c('OPP_NAME'))  %>%
group_by(TEAM_NAME, TEAM_ID) %>%
arrange(TEAM_NAME, round, game_number)
#Get Matchup Dataframe
raw_matchup_df <- do.call(rbind, lapply(unique(gamelog$GAME_ID), pull_matchup_box))
#Join in helper columns
team_colors <- read.csv('C:/Users/saurabh.rane/OneDrive - Slalom/NBA/data_update_scripts/Data/teamColors.csv') %>%
select(TEAM_ID, TEAM_NAME, TEAM_ABBREVIATION, Primary.Color)
#First pass at Matchup Clean
matchup_df <- raw_matchup_df %>%
left_join(team_colors, by = c('off_team_id' = 'TEAM_ID')) %>%
left_join(team_colors, by = c('def_team_id' = 'TEAM_ID')) %>%
rename(off_team_abv = TEAM_ABBREVIATION.x, off_team_name = TEAM_NAME.x, off_team_color = Primary.Color.x,
def_team_abv = TEAM_ABBREVIATION.y, def_team_name = TEAM_NAME.y, def_team_color = Primary.Color.y) %>%
mutate(OFF_PLAYER_NAME = str_replace_all(OFF_PLAYER_NAME, "[^[:alnum:][:space:]]", ""),
DEF_PLAYER_NAME = str_replace_all(DEF_PLAYER_NAME, "[^[:alnum:][:space:]]", ""))
df_def <- matchup_df %>%
group_by(game_id, def_team_id, DEF_PLAYER_ID) %>%
arrange(DEF_PLAYER_ID, -MATCHUP_MIN) %>%
mutate(min_played = sum(MATCHUP_MIN),
matchup_min_end_def = cumsum(MATCHUP_MIN),
matchup_min_start_def = matchup_min_end_def - MATCHUP_MIN,
pct_matchup_time_def = MATCHUP_MIN/min_played,
pct_matchup_time_scaled_def = scales::rescale(pct_matchup_time_def)) %>%
select(game_id, def_team_id, OFF_PLAYER_ID, DEF_PLAYER_ID, matchup_min_start_def,
matchup_min_end_def,  pct_matchup_time_scaled_def)
df <- matchup_df %>%
group_by(game_id, off_team_id, OFF_PLAYER_ID, OFF_PLAYER_NAME) %>%
arrange(OFF_PLAYER_NAME, -MATCHUP_MIN) %>%
mutate(min_played = sum(MATCHUP_MIN),
matchup_min_end = cumsum(MATCHUP_MIN),
matchup_min_start = matchup_min_end - MATCHUP_MIN,
pct_matchup_time = MATCHUP_MIN/min_played,
OFF_PLAYER_NAME_LAST = sub("^\\S+\\s", "", OFF_PLAYER_NAME),
DEF_PLAYER_NAME_LAST = sub("^\\S+\\s", "", DEF_PLAYER_NAME),
pct_matchup_time_scaled = scales::rescale(pct_matchup_time),
DEF_PLAYER_HEADSHOT = paste0("https://cdn.nba.com/headshots/nba/latest/1040x760/", DEF_PLAYER_ID, ".png"),
OFF_PLAYER_HEADSHOT = paste0("https://cdn.nba.com/headshots/nba/latest/1040x760/", OFF_PLAYER_ID, ".png")) %>%
inner_join(gamelog_enchanced %>% select(GAME_ID, TEAM_ID, MATCHUP, game_number, matchup_full) %>% mutate(TEAM_ID = as.integer(TEAM_ID)),
by = c('game_id' = 'GAME_ID', 'off_team_id' = 'TEAM_ID')) %>%
inner_join(df_def, by = c('game_id', 'OFF_PLAYER_ID',  'def_team_id', 'DEF_PLAYER_ID'))
write.csv(df, "Data/matchups.csv")
write.csv(gamelog_enchanced, "Data/gamelog.csv")
library(hoopR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(png)
library(ggimage)
library(magick)
library(ggtext)
library(extrafont)
library(forcats)
loadfonts(device="win")
pull_matchup_box <- function(game_id){
print(game_id)
pull_df <- rbind(nba_boxscorematchupsv3(game_id = game_id)[[1]], nba_boxscorematchupsv3(game_id = game_id)[[2]])
pull_df <- tryCatch(
expr = {
rbind(nba_boxscorematchupsv3(game_id = game_id)[[1]], nba_boxscorematchupsv3(game_id = game_id)[[2]])
},
error = function(e) {
print("Error occurred while retrieving data from the API.")
return(NULL)  # Return NULL if an error occurs
}
)
if (is.null(pull_df)) {
return(NULL)  # Return NULL if pull_df is NULL (i.e., an error occurred)
}
Sys.sleep(3)
df <- pull_df %>%
rename(OFF_PLAYER_ID = person_id, DEF_PLAYER_ID = matchups_person_id) %>%
mutate(OFF_PLAYER_NAME = paste0(first_name, " " , family_name),
DEF_PLAYER_NAME = paste0(matchups_first_name, " " , matchups_family_name),
MATCHUP_MIN = matchup_minutes_sort/60,
off_team_id = team_id,
def_team_id = ifelse(team_id == home_team_id, away_team_id, home_team_id)) %>%
select(game_id, off_team_id, OFF_PLAYER_ID, OFF_PLAYER_NAME,
def_team_id, DEF_PLAYER_ID, DEF_PLAYER_NAME,
MATCHUP_MIN, percentage_total_time_both_on)
return(df)
}
gamelog <-  nba_leaguegamelog(league_id = '00', season = year_to_season(most_recent_nba_season() - 1),
season_type = 'Playoffs')[[1]] %>%
mutate(MATCHUP = str_replace_all(MATCHUP, c("@" = "vs.")))  %>%
filter(!is.na(WL)) %>%
select(TEAM_NAME, TEAM_ID, GAME_ID, GAME_DATE, MATCHUP) %>%
group_by(MATCHUP, TEAM_ID, TEAM_NAME) %>%
arrange(MATCHUP,GAME_DATE) %>%
mutate(game_number = paste0("Game ", row_number())) %>%
ungroup() %>%
arrange(MATCHUP) %>%
mutate(version = format(Sys.time(), "%a %b %d %X"),
)
unique_matchups <- gamelog %>%
group_by(TEAM_ID, MATCHUP) %>%
summarize(matchup_start = min(GAME_DATE)) %>%
arrange(matchup_start) %>%
ungroup() %>%
group_by(TEAM_ID) %>%
mutate(round = row_number()) %>%
ungroup()
gamelog_enchanced <- gamelog %>%
left_join(gamelog %>% select('GAME_ID', 'TEAM_NAME') %>% rename('OPP_NAME' = 'TEAM_NAME'),
by = c('GAME_ID')) %>%
filter(OPP_NAME != TEAM_NAME) %>%
left_join(unique_matchups, by = c('TEAM_ID', 'MATCHUP')) %>%
mutate(matchup_full = paste0("Round ", round, ": ", MATCHUP, ", ", game_number)) %>%
left_join(team_colors %>% select(TEAM_NAME, Primary.Color) %>% rename('TEAM_COLOR' = 'Primary.Color'),
by = c('TEAM_NAME'))  %>%
left_join(team_colors %>% select(TEAM_NAME, Primary.Color)
%>% rename('OPP_NAME' = 'TEAM_NAME', 'OPP_COLOR' = 'Primary.Color'),
by = c('OPP_NAME'))  %>%
group_by(TEAM_NAME, TEAM_ID) %>%
arrange(TEAM_NAME, round, game_number)
#Get Matchup Dataframe
raw_matchup_df <- do.call(rbind, lapply(unique(gamelog$GAME_ID), pull_matchup_box))
#Join in helper columns
team_colors <- read.csv('C:/Users/saurabh.rane/OneDrive - Slalom/NBA/data_update_scripts/Data/teamColors.csv') %>%
select(TEAM_ID, TEAM_NAME, TEAM_ABBREVIATION, Primary.Color)
#First pass at Matchup Clean
matchup_df <- raw_matchup_df %>%
left_join(team_colors, by = c('off_team_id' = 'TEAM_ID')) %>%
left_join(team_colors, by = c('def_team_id' = 'TEAM_ID')) %>%
rename(off_team_abv = TEAM_ABBREVIATION.x, off_team_name = TEAM_NAME.x, off_team_color = Primary.Color.x,
def_team_abv = TEAM_ABBREVIATION.y, def_team_name = TEAM_NAME.y, def_team_color = Primary.Color.y) %>%
mutate(OFF_PLAYER_NAME = str_replace_all(OFF_PLAYER_NAME, "[^[:alnum:][:space:]]", ""),
DEF_PLAYER_NAME = str_replace_all(DEF_PLAYER_NAME, "[^[:alnum:][:space:]]", ""))
df_def <- matchup_df %>%
group_by(game_id, def_team_id, DEF_PLAYER_ID) %>%
arrange(DEF_PLAYER_ID, -MATCHUP_MIN) %>%
mutate(min_played = sum(MATCHUP_MIN),
matchup_min_end_def = cumsum(MATCHUP_MIN),
matchup_min_start_def = matchup_min_end_def - MATCHUP_MIN,
pct_matchup_time_def = MATCHUP_MIN/min_played,
pct_matchup_time_scaled_def = scales::rescale(pct_matchup_time_def)) %>%
select(game_id, def_team_id, OFF_PLAYER_ID, DEF_PLAYER_ID, matchup_min_start_def,
matchup_min_end_def,  pct_matchup_time_scaled_def)
df <- matchup_df %>%
group_by(game_id, off_team_id, OFF_PLAYER_ID, OFF_PLAYER_NAME) %>%
arrange(OFF_PLAYER_NAME, -MATCHUP_MIN) %>%
mutate(min_played = sum(MATCHUP_MIN),
matchup_min_end = cumsum(MATCHUP_MIN),
matchup_min_start = matchup_min_end - MATCHUP_MIN,
pct_matchup_time = MATCHUP_MIN/min_played,
OFF_PLAYER_NAME_LAST = sub("^\\S+\\s", "", OFF_PLAYER_NAME),
DEF_PLAYER_NAME_LAST = sub("^\\S+\\s", "", DEF_PLAYER_NAME),
pct_matchup_time_scaled = scales::rescale(pct_matchup_time),
DEF_PLAYER_HEADSHOT = paste0("https://cdn.nba.com/headshots/nba/latest/1040x760/", DEF_PLAYER_ID, ".png"),
OFF_PLAYER_HEADSHOT = paste0("https://cdn.nba.com/headshots/nba/latest/1040x760/", OFF_PLAYER_ID, ".png")) %>%
inner_join(gamelog_enchanced %>% select(GAME_ID, TEAM_ID, MATCHUP, game_number, matchup_full) %>% mutate(TEAM_ID = as.integer(TEAM_ID)),
by = c('game_id' = 'GAME_ID', 'off_team_id' = 'TEAM_ID')) %>%
inner_join(df_def, by = c('game_id', 'OFF_PLAYER_ID',  'def_team_id', 'DEF_PLAYER_ID'))
write.csv(df, "Data/matchups.csv")
write.csv(gamelog_enchanced, "Data/gamelog.csv")
